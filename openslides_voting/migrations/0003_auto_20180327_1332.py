# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-03-27 11:32
from __future__ import unicode_literals

import re

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import openslides.utils.models
import openslides_voting.models


def move_voting_principles_from_category_to_own_model(apps, schema_editor):
    """
    Creates VotingPriciples for every existing Category, if it has the following
    name convention: <principle name>.<decimal places (0-6)>
    Adds all VotingShares associated with this category to the new VotingPrinciple.
    """
    Category = apps.get_model('motions', 'Category')
    VotingShare = apps.get_model('openslides_voting', 'VotingShare')
    VotingPrinciple = apps.get_model('openslides_voting', 'VotingPrinciple')

    regex = re.compile("^(.+)\.([1-6])$")
    for category in Category.objects.all():
        # check, if VotingShares exist for this category. If not, skip it.
        shares = VotingShare.objects.filter(category=category)
        if len(shares) == 0:
            continue

        # Get name and decimal places information
        match = regex.match(category.name)
        if match is not None:
            name, places = match.groups()
            places = int(places)
        else:
            name = category.name
            places = 0

        # check, if voting principles with the name already exists
        if VotingPrinciple.objects.filter(name=name).exists():
            continue  # Skip duplicates

        # Create VotingPrinciple and assign it to each share
        principle = VotingPrinciple(name=name, decimal_places=places)
        principle.save(skip_autoupdate=True)

        for share in shares:
            share.principle = principle
            share.save(skip_autoupdate=True)

        # Assign each motion assigned to the category to the principle.
        # This is save, becuase each motion can only be in one or none category.
        # Assignments are not supported yet, so no migration for those.
        for motion in category.motion_set.all():
            principle.motions.add(motion)
        principle.save(skip_autoupdate=True)


class Migration(migrations.Migration):

    dependencies = [
        ('assignments', '0003_candidate_weight'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('motions', '0005_auto_20180202_1318'),
        ('openslides_voting', '0002_attendancelog'),
    ]

    operations = [
        migrations.CreateModel(
            name='VotingPrinciple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('decimal_places', models.PositiveIntegerField()),
                ('assignments', openslides_voting.models.OneToManyField(blank=True, to='assignments.Assignment')),
                ('motions', openslides_voting.models.OneToManyField(blank=True, to='motions.Motion')),
            ],
            options={
                'default_permissions': (),
            },
            bases=(openslides.utils.models.RESTModelMixin, models.Model),
        ),
        migrations.RenameModel(
            old_name='VoteCollector',
            new_name='VotingController',
        ),
        migrations.AddField(
            model_name='votingshare',
            name='principle',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='openslides_voting.VotingPrinciple'),
        ),
        migrations.AlterUniqueTogether(
            name='votingshare',
            unique_together=set([('delegate', 'principle')]),
        ),
        migrations.RunPython(
            move_voting_principles_from_category_to_own_model
        ),
        migrations.RemoveField(
            model_name='votingshare',
            name='category',
        ),
    ]
